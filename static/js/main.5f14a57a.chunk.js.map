{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","setDonationValue","e","setState","valueToBeDonated","target","value","handleDonateClick","numberOfDonors","state","totalMoneyDonated","parseInt","moneyLeft","donationTargetValue","this","className","style","width","backgroundColor","height","transition","type","onChange","disabled","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAkFeA,G,kBA7Eb,aAAe,IAAD,8BACZ,+CAUFC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAACC,iBAAkBF,EAAEG,OAAOC,SAZ9B,EAedC,kBAAoB,WAClB,EAAKJ,SAAS,CAACK,eAAgB,EAAKC,MAAMD,eAAiB,IAC3D,EAAKL,SAAS,CAACO,kBAAmB,EAAKD,MAAMC,kBAAoBC,SAAS,EAAKF,MAAML,oBACjF,EAAKK,MAAML,iBAAmB,EAAKK,MAAMG,UAC3C,EAAKT,SAAS,CAACS,UAAW,IAE1B,EAAKT,SAAS,CAACS,UAAW,EAAKH,MAAMG,UAAY,EAAKH,MAAML,mBAE9D,EAAKD,SAAS,CAACC,iBAAkB,MArBjC,EAAKK,MAAQ,CACXI,oBAAqB,IACrBD,UAAW,IACXJ,eAAgB,EAChBJ,iBAAkB,GAClBM,kBAAmB,GAPT,E,sEA0BJ,IAAD,EACuFI,KAAKL,MAA5FI,EADA,EACAA,oBAAqBD,EADrB,EACqBA,UAAWJ,EADhC,EACgCA,eAAgBJ,EADhD,EACgDA,iBAAkBM,EADlE,EACkEA,kBACzE,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,kBACb,6BAAK,0BAAMA,UAAU,QAAhB,IAAyBH,GAA9B,mCAEF,yBAAKG,UAAU,gBACb,yBACAA,UAAU,uBACVC,MAAO,CACLC,MAAM,GAAD,OAAMP,EAAkBG,EAAqB,IAA7C,KACLK,gBAAiB,UACjBC,OAAQ,OACRC,WAAY,kBAIhB,yBAAKL,UAAU,gBACb,6BAAK,0BAAMA,UAAU,UAAhB,oBAAL,0BACA,6BACA,yCAAc,0BAAMA,UAAU,QAAQP,GAAtC,8EACA,6BACA,yBAAKO,UAAU,0BACb,2BACAM,KAAK,SACLN,UAAU,iBACVT,MAAOF,EACPkB,SAAUR,KAAKb,mBAEf,4BACAc,UAAS,UAA0B,KAArBX,GAAyC,IAAdQ,EAAkB,yBAA2B,iBACtFW,SAA+B,KAArBnB,GAAyC,IAAdQ,EACrCY,QAASV,KAAKP,mBAHd,aAOF,6BACA,yBAAKQ,UAAS,UAA0B,KAArBX,EAA0B,6BAA+B,qBAA5E,aACaA,EADb,MAIF,yBAAKW,UAAU,2BACb,4BAAQA,UAAU,iBAAlB,kBACA,4BAAQA,UAAU,iBAAlB,2B,GAvEQU,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5f14a57a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      donationTargetValue: 500,\n      moneyLeft: 500,\n      numberOfDonors: 0,\n      valueToBeDonated: '',\n      totalMoneyDonated: 0,\n    }\n  }\n\n  setDonationValue = (e) => {\n    this.setState({valueToBeDonated: e.target.value})\n  }\n\n  handleDonateClick = () => {\n    this.setState({numberOfDonors: this.state.numberOfDonors + 1})\n    this.setState({totalMoneyDonated: this.state.totalMoneyDonated + parseInt(this.state.valueToBeDonated)})\n    if (this.state.valueToBeDonated > this.state.moneyLeft) {\n      this.setState({moneyLeft: 0})\n    } else {\n      this.setState({moneyLeft: this.state.moneyLeft - this.state.valueToBeDonated})\n    }\n    this.setState({valueToBeDonated: ''})\n  }\n\n  render() {\n    const {donationTargetValue, moneyLeft, numberOfDonors, valueToBeDonated, totalMoneyDonated} = this.state\n    return (\n      <div className='App'>\n        <div className='thought-bubble'>\n          <div><span className='bold'>${moneyLeft}</span> still needed for this project</div>\n        </div>\n        <div className='progress-bar'>\n          <div \n          className='progress-bar-filling'\n          style={{\n            width: `${(totalMoneyDonated/donationTargetValue)*100}%`,\n            backgroundColor: '#EF5F3C',\n            height: '20px',\n            transition: 'all 1s ease'\n          }}>\n          </div>\n        </div>\n        <div className='main-content'>\n          <div><span className='orange'>Only 3 days left</span> to fund this project.</div>\n          <br/>\n          <div>Join the <span className='grey'>{numberOfDonors}</span> other donors who have already supported this project. Every dollar helps.</div>\n          <br/>\n          <div className='button-input-container'>\n            <input \n            type='number' \n            className='donation-input' \n            value={valueToBeDonated} \n            onChange={this.setDonationValue}\n            />\n            <button \n            className={`${valueToBeDonated === '' || moneyLeft === 0 ? 'donate-button-disabled' : 'donate-button'}`} \n            disabled={valueToBeDonated === '' || moneyLeft === 0 ? true : false} \n            onClick={this.handleDonateClick}>\n              Give Now\n            </button>\n          </div>\n          <br/>\n          <div className={`${valueToBeDonated === '' ? 'explanation-link-invisible' : 'explanation-link'}`}>\n            Why give ${valueToBeDonated}?\n          </div>\n        </div>\n        <div className='footer-button-container'>\n          <button className='footer-button'>Save for later</button>\n          <button className='footer-button'>Tell your friends</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}